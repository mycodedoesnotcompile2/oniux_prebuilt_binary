name: Build binary

on:
  workflow_dispatch

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  ONIUX_ROOT_DIR: /tmp/oniux
  APT: sudo apt -y -qq -o=Dpkg::Use-Pty=0
  CARGO_GET: https://github.com/nicolaiunrein/cargo-get/releases/download/v1.4.0/cargo-get-x86_64-unknown-linux-gnu

defaults:
  run:
    # necessary for windows
    shell: bash

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # a list of all the targets
        include:
          - TARGET: x86_64-unknown-linux-gnu # tested in a debian container on a mac
            OS: ubuntu-latest
          
          - TARGET: x86_64-unknown-linux-musl # test in an alpine container on a mac
            OS: ubuntu-latest
          
          - TARGET: aarch64-unknown-linux-gnu # tested on aws t4g.nano
            OS: ubuntu-latest
          
          #- TARGET: aarch64-unknown-linux-musl # tested on aws t4g.nano in alpine container
          #  OS: ubuntu-latest
          
          - TARGET: armv7-unknown-linux-gnueabihf # raspberry pi 2-3-4, not tested
            OS: ubuntu-latest
          
          #- TARGET: armv7-unknown-linux-musleabihf # raspberry pi 2-3-4, not tested
          #  OS: ubuntu-latest
          
          - TARGET: arm-unknown-linux-gnueabihf # raspberry pi 0-1, not tested
            OS: ubuntu-latest
          
          #- TARGET: arm-unknown-linux-musleabihf # raspberry pi 0-1, not tested
          #  OS: ubuntu-latest
          
          # - TARGET: x86_64-apple-darwin # tested on a mac, is not properly signed so there are security warnings
          #   OS: macos-latest
          
          # - TARGET: x86_64-pc-windows-msvc # tested on a windows machine
          #   OS: windows-latest
            
    runs-on: ${{ matrix.OS }}

    outputs:
      ONIUX_CURRENT_COMMIT_ID: ${{ steps.release_version.outputs.ONIUX_CURRENT_COMMIT_ID }}
      ONIUX_PREBUILT_LATEST_TAG: ${{ steps.release_version.outputs.ONIUX_PREBUILT_LATEST_TAG }}
    
    env:
      NAME: oniux_binary # change with the name of your project
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
    
    steps:
      - name: Get latest release of this repo
        id: self_latest_version
        uses: abatilo/release-info-action@v1.3.0
        with:
          owner: mycodedoesnotcompile2
          repo: oniux_prebuilt_binary
      
      - name: Clone oniux repo and check if there is a new and uncompiled yet version
        id: release_version
        run: |
          cd /tmp/
          git clone 'https://gitlab.torproject.org/tpo/core/oniux.git' -o oniux

          cd /tmp/oniux/
          ONIUX_CURRENT_COMMIT_ID=$(git rev-parse --short HEAD)
          ONIUX_PREBUILT_LATEST_TAG=${{ steps.self_latest_version.outputs.latest_tag }}
          echo "ONIUX_CURRENT_COMMIT_ID=$ONIUX_CURRENT_COMMIT_ID" >> $GITHUB_ENV

          # case: no new commit => abort the workflow
          if [[ $ONIUX_PREBUILT_LATEST_TAG == $ONIUX_CURRENT_COMMIT_ID ]]; then
            exit 1
          fi
      
      - name: Get oniux version
        run: |
          cd /tmp/
          sudo wget -nv "$CARGO_GET" -O /usr/local/bin/cargo-get && sudo chmod o+x /usr/local/bin/cargo-get
          cd /tmp/oniux
          ONIUX_VERSION=$(cargo-get package.version)
          echo "ONIUX_VERSION=$ONIUX_VERSION" >> $GITHUB_ENV
      
      - name: Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            /tmp/oniux
          key: build-cargo-registry-${{ matrix.TARGET }}
        
      - name: Install and configure dependencies
        run: |
          # dependencies are only needed on ubuntu as that's the only place where
          # we make cross-compilation
          if [[ $OS =~ ^ubuntu.*$ ]]; then
            sudo $APT install crossbuild-essential-arm64 crossbuild-essential-armhf libsqlite3-dev
          fi

          if [[ $TARGET == *"-musl"* ]]; then
            sudo $APT install musl-tools
          fi

          if [[ $TARGET == "arm"* ]]; then
            cd "$ONIUX_ROOT_DIR"
            cargo install --force --locked bindgen-cli
          fi

          # some additional configuration for cross-compilation on linux
          cat >>~/.cargo/config <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-gnu-gcc"
          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.armv7-unknown-linux-musleabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.arm-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.arm-unknown-linux-musleabihf]
          linker = "arm-linux-gnueabihf-gcc"
          EOF
      
      - name: Install rust target
        run: rustup target add $TARGET
        
      - name: Run build
        run: |
          cd $ONIUX_ROOT_DIR
          #cargo build --release --verbose --target $TARGET
          cargo build --release --target $TARGET
      
      - name: List build information
        run: |
          OLD_ONIUX_BIN_PATH="$ONIUX_ROOT_DIR/target/$TARGET/release/oniux"
          ONIUX_BIN_PATH="$ONIUX_ROOT_DIR-$ONIUX_VERSION-$TARGET"
          ONIUX_BIN_HASH_PATH="$ONIUX_BIN_PATH.sha256.txt"
          
          cp -f "$OLD_ONIUX_BIN_PATH" "$ONIUX_BIN_PATH"
          ls -alh "$ONIUX_BIN_PATH"

          cd "$(dirname "$ONIUX_BIN_PATH")"
          sha256sum --tag "$(basename "$ONIUX_BIN_PATH")" | tee "$ONIUX_BIN_HASH_PATH"
          
          echo "ONIUX_BIN_PATH=$ONIUX_BIN_PATH" >> $GITHUB_ENV
          echo "ONIUX_BIN_HASH_PATH=$ONIUX_BIN_HASH_PATH" >> $GITHUB_ENV
          
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.TARGET }}
          path: |
            ${{ env.ONIUX_BIN_PATH }}
            ${{ env.ONIUX_BIN_HASH_PATH }}


  deploy_release:
    needs: build
    runs-on: ubuntu-latest
    steps:
     - env:
       ONIUX_CURRENT_COMMIT_ID: ${{ needs.build.outputs.ONIUX_CURRENT_COMMIT_ID }}
       ONIUX_PREBUILT_LATEST_TAG: ${{ needs.build.outputs.ONIUX_PREBUILT_LATEST_TAG }}
      
     - name: Download Artifact
       uses: actions/download-artifact@v4
       with:
        pattern: binary-*
        merge-multiple: true
        path: /tmp/results

     - name: List target
       run: |
          cd "/tmp/results"
          ls -alh
  
          RELEASE_NOTES="/tmp/release_notes.txt"
          echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_ENV
          
          cat *.sha256.txt > "$RELEASE_NOTES"
          mkdir -p "/tmp/hashes"
          mv -f *.sha256.txt "/tmp/hashes/"
  
     - name: Create a new Github release
       uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 #v2.3.2
       with:
         body_path: ${{ env.RELEASE_NOTES }}
         name: ${{ env.ONIUX_VERSION }}
         tag_name: ${{ env.ONIUX_CURRENT_COMMIT_ID }}
         files: |
           /tmp/results/oniux-*
