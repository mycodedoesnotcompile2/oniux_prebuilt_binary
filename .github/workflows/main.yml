name: Build binary

on:
  workflow_dispatch

env:
  CARGO_TERM_COLOR: always
  ONIUX_ROOT_DIR: /tmp/oniux
  APT: sudo apt -y -qq -o=Dpkg::Use-Pty=0

defaults:
  run:
    # necessary for windows
    shell: bash

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # a list of all the targets
        include:
          - TARGET: x86_64-unknown-linux-gnu # tested in a debian container on a mac
            OS: ubuntu-latest
          
          - TARGET: x86_64-unknown-linux-musl # test in an alpine container on a mac
            OS: ubuntu-latest
          
          - TARGET: aarch64-unknown-linux-gnu # tested on aws t4g.nano
            OS: ubuntu-latest
          
          - TARGET: aarch64-unknown-linux-musl # tested on aws t4g.nano in alpine container
            OS: ubuntu-latest
          
          - TARGET: armv7-unknown-linux-gnueabihf # raspberry pi 2-3-4, not tested
            OS: ubuntu-latest
          
          - TARGET: armv7-unknown-linux-musleabihf # raspberry pi 2-3-4, not tested
            OS: ubuntu-latest
          
          - TARGET: arm-unknown-linux-gnueabihf # raspberry pi 0-1, not tested
            OS: ubuntu-latest
          
          - TARGET: arm-unknown-linux-musleabihf # raspberry pi 0-1, not tested
            OS: ubuntu-latest
          
          - TARGET: x86_64-apple-darwin # tested on a mac, is not properly signed so there are security warnings
            OS: macos-latest
          
          - TARGET: x86_64-pc-windows-msvc # tested on a windows machine
            OS: windows-latest
            
    runs-on: ${{ matrix.OS }}
    
    env:
      NAME: oniux_binary # change with the name of your project
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
    
    steps:
      - name: Clone oniux repo
        run: |
          cd /tmp/
          git clone 'https://gitlab.torproject.org/tpo/core/oniux.git' -o "$ONIUX_ROOT_DIR"

          #echo "ONIUX_ROOT_DIR=/tmp/oniux" >> $GITHUB_ENV
      
      - name: Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            /tmp/oniux
          key: build-cargo-registry-${{ matrix.TARGET }}
      
      - name: List
        run: find $ONIUX_ROOT_DIR
        
      - name: Install and configure dependencies
        run: |
          # dependencies are only needed on ubuntu as that's the only place where
          # we make cross-compilation
          if [[ $OS =~ ^ubuntu.*$ ]]; then
            #APT='sudo apt -y -qq -o=Dpkg::Use-Pty=0'
            sudo $APT install crossbuild-essential-arm64 crossbuild-essential-armhf

            if [[ $TARGET == "x86_64-unknown-linux-musl" ]]; then
              sudo $APT install musl-tools
            fi
          fi

          # some additional configuration for cross-compilation on linux
          cat >>~/.cargo/config <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-gnu-gcc"
          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.armv7-unknown-linux-musleabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.arm-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.arm-unknown-linux-musleabihf]
          linker = "arm-linux-gnueabihf-gcc"
          EOF
      
      - name: Install rust target
        run: rustup target add $TARGET
        
      - name: Run build
        run: |
          cd $ONIUX_ROOT_DIR
          cargo build --release --verbose --target $TARGET
      
      - name: List target
        run: find -type f $ONIUX_ROOT_DIR/target/$TARGET
      
      - name: Compress
        run: |
          mkdir -p ./artifacts
          # windows is the only OS using a different convention for executable file name
          if [[ $OS =~ ^windows.*$ ]]; then
              EXEC=$NAME.exe
          else
              EXEC=$NAME
          fi
          if [[ $GITHUB_REF_TYPE =~ ^tag$ ]]; then
            TAG=$GITHUB_REF_NAME
          else
            TAG=$GITHUB_SHA
          fi
          mv ./target/$TARGET/release/$EXEC ./$EXEC
          tar -czf ./artifacts/$NAME-$TARGET-$TAG.tar.gz $EXEC
      
      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: result
          path: |
            ./artifacts
